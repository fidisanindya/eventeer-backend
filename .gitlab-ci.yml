stages:
  - test
  - build
  - deploy
  

variables:
  IMAGE_TAG: $CI_REGISTRY/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME:$CI_COMMIT_REF_SLUG
  DOCKER_TLS_CERTDIR: ""
  TAG_LATEST: $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_NAME:latest
  TAG_COMMIT: $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_NAME:$CI_COMMIT_SHORT_SHA
  CONTAINER_NAME: "php-eventeer-v2-$CI_COMMIT_REF_SLUG"
  DOCKER_NETWORK: "ev_net"
  APP_BUILD_ID: $CI_PIPELINE_ID
  ENV: $ENV

  
.build: &build
  stage: build
  image: masrodjie/docker:latest
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - echo "$ENV" > $CI_PROJECT_DIR/.env
    - docker pull $IMAGE_TAG || true
    - docker build --cache-from $IMAGE_TAG -t $IMAGE_TAG .
    - docker push $IMAGE_TAG

build:development:
  <<: *build
  environment:
    name: development
  only:
    - feature/bintang/sonarqube

.deploy: &deploy
  stage: deploy
  image: masrodjie/alpine:latest
  before_script:
    - mkdir -p ~/.ssh
    - eval $(ssh-agent -s)
    - echo "$SSH_PUBLIC_KEY" > ~/.ssh/id_rsa.pub
    - echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
    - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
    - chmod 600 ~/.ssh/id_rsa.pub
    - chmod 600 ~/.ssh/id_rsa

deploy:development:
  <<: *deploy
  script:
    - docker context create g0 --docker "host=ssh://root@d0.eventeer.id"
    - docker context use g0
    - ssh -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker pull $IMAGE_TAG"
    - ssh -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker container rm -f $CONTAINER_NAME || true"
    - ssh -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker run --network=$DOCKER_NETWORK -e APP_BUILD_ID=$APP_BUILD_ID -d --restart unless-stopped -v /data/www/html/dev.v2.api.eventeer.id/storage:/var/www/html/storage --name $CONTAINER_NAME $IMAGE_TAG"
    - ssh -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker exec --user nobody $CONTAINER_NAME php artisan storage:link"
    - ssh -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker exec --user nobody $CONTAINER_NAME php artisan migrate"
  environment:
    name: development
  only:
    - feature/bintang/sonarqube

sonarqube-check:
  image: sonarsource/sonar-scanner-cli
  needs: []
  dependencies: []
  script:
    - sonar-scanner -Dsonar.qualitygate.wait=true
  allow_failure: true
  variables:
    SONAR_PROJECT_BASE_DIR: "${CI_PROJECT_DIR}"
    GIT_DEPTH: 0
  cache:
    key: "sonar-${CI_PROJECT_ID}"
    paths:
      - ".scannerwork"
      - ".sonar"
  only:
    - feature/bintang/sonarqube
